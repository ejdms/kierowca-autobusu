{"version":3,"sources":["components/MainWrapper.js","components/Card.js","components/PlayerHand.js","components/Button.js","components/GameTable.js","stages/GameBoardScreen.js","components/AddPlayerCard.js","functions/createPlayer.js","stages/StartScreen.js","stages/InitialPhaseScreen.js","functions/getGender.js","functions/randomizeArrayOrder.js","stages/KierowcaAutobusuPhaseScreen.js","functions/createCard.js","App.js","serviceWorker.js","index.js"],"names":["MainWrapper","children","className","Card","symbol","color","onHand","active","PlayerHand","name","cards","sips","canClickOnHand","click","cardsOnHand","id","map","card","i","key","onClick","Button","text","additionalClasses","GameTable","btnText","canClickOnButton","cardsOnTableInRows","playersHands","handleClickOnNextCardBtn","giveSipsNumber","handleChangeSipsNumberToGive","sipsInfo","sipsOptions","push","value","sipsInfoText","sipInfo","giveSipsInfo","defaultValue","onChange","e","length","GameBoard","game","setGame","players","setPlayers","initialStates","useState","setBtnText","setCanClickOnButton","giveSips","setGiveSips","setGiveSipsNumber","giveSipsNumberSelected","setGiveSipsNumberSelected","setSipsInfo","forceEnd","setForceEnd","reset","useEffect","changeScreenToKierowca","setTimeout","prev","gameBoardScreenVisible","kierowcaAutubusuScreenVisible","currentPlayer","player","cardsOnTable","findIndex","cardsOnTableNoRows","action","splice","parseInt","newPlayers","newGiveSips","filter","sip","index","handleClickOnPlayer","cardIndex","cardId","playersThatHaveTheSameCard","sameCard","forEach","playerWithTheSameCard","playerCard","type","number","toLowerCase","newSipsInfo","newSipsInfoElement","playersWithKierowca","newCardsOnTable","target","AddPlayerCard","handleAddPlayer","handleRemovePlayer","add","setAdd","resetName","handleChange","onKeyDown","which","preventDefault","handleKeyDown","placeholder","createPlayer","initialPhaseOneCompleted","initialPhaseTwoCompleted","StartScreen","numberOfPlayers","userCards","allowToAddPlayer","newPlayer","startScreenVisible","gameInitialPhaseScreenVisible","InitialPhaseScreen","initialGameInitialState","completed","phase","shouldChangeCurrentPlayer","canClick","initialGame","setInitialGame","playerId","lastPlayerId","handleClick","option","colorOfCurrentCard","figures","indexOfFirstCardFigure","figure","reduce","win","options","apiKeys","require","getGender","a","async","gender","accuracy","apiKey","genderApi","url","result","fetch","then","res","json","catch","err","console","log","randomizeArrayOrder","array","newArray","sort","Math","random","KierowcaAutobusuPhaseScreen","handleGameReset","allPlayers","initialKierowcaState","cardsInDeck","cardsInGame","cardsOnTheTable","numberOfCardsLeft","infoText","gameOver","kierowca","setKierowca","currentPlayerId","correctChoice","incorrectChoice","getText","updateCurrentPlayer","sipsNumber","genderInfo","arrayFromString","split","char","test","join","nextPlayer","previousCard","indexOfPreviousCardSymbol","correct","playerWithKierowca","content","scores","phaseOneButtons","phaseTwoAndMoreButtons","buttons","createCard","App","initialGameState","activeCard","generateCards","recursiveFunction","cardsPossible","figuresPossible","howManyCards","howManyFigures","floor","j","cardsPossibleRandom","tableCards","playersCards","kierowcaCard","playerWithKierowcaExisting","cardsOnTableWithActions","GameBoardScreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6392f32.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst MainWrapper = ({ children }) => (\r\n  <div className=\"main-wrapper\">{children}</div>\r\n);\r\n\r\nexport default MainWrapper;\r\n","import React from \"react\";\r\n\r\nconst Card = ({ symbol, color, onHand, active }) => {\r\n  return (\r\n    <div\r\n      className={`card ${color} ${onHand ? \"on-hand\" : \"on-table\"} ${\r\n        active ? \"active\" : \"\"\r\n      }`}\r\n    >\r\n      {symbol}\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst PlayerHand = ({ name, cards, sips, canClickOnHand, click, id }) => {\r\n  const cardsOnHand = cards.map((card, i) => {\r\n    return (\r\n      <Card\r\n        onHand={true}\r\n        symbol={card.symbol}\r\n        active={card.active}\r\n        color={card.color}\r\n        key={i}\r\n        id={card.id}\r\n      />\r\n    );\r\n  });\r\n  return (\r\n    <div\r\n      className={`player-hand ${canClickOnHand && \"clickable\"}`}\r\n      onClick={() => {\r\n        if (canClickOnHand) {\r\n          click();\r\n        }\r\n      }}\r\n    >\r\n      <div className=\"player-name\">\r\n        {name} <span>Sipps: {sips}</span>\r\n      </div>\r\n      <div className=\"player-cards\">{cardsOnHand}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerHand;\r\n","import React from 'react'\r\n\r\nconst Button = ({text, additionalClasses, click}) => {\r\n  return (\r\n    <button onClick={click && click} className={`btn ${additionalClasses ? additionalClasses : ''}`}>{text}</button>\r\n  )\r\n}\r\nexport default Button;","import React from 'react'\r\nimport Button from './Button'\r\n\r\nconst GameTable = ({\r\n  btnText,\r\n  canClickOnButton,\r\n  cardsOnTableInRows,\r\n  playersHands,\r\n  handleClickOnNextCardBtn,\r\n  giveSipsNumber,\r\n  handleChangeSipsNumberToGive,\r\n  sipsInfo,\r\n}) => {\r\n  const sipsOptions = []\r\n  for (let i = 0; i < giveSipsNumber; i++) {\r\n    sipsOptions.push(\r\n      <option value={i + 1} key={i}>\r\n        {i + 1}\r\n      </option>\r\n    )\r\n  }\r\n\r\n  const sipsInfoText = sipsInfo.map((sipInfo, i) => (\r\n    <li key={i}>\r\n      Player {sipInfo.name} drink {sipInfo.sips}{' '}\r\n      {sipInfo.sips === 1 ? 'sip' : 'sips'}\r\n    </li>\r\n  ))\r\n\r\n  const giveSipsInfo = (\r\n    <>\r\n      <h3>Choose number of sips to give other player</h3>\r\n      <select\r\n        className=\"select\"\r\n        defaultValue={1}\r\n        onChange={(e) => handleChangeSipsNumberToGive(e)}\r\n      >\r\n        {sipsOptions}\r\n      </select>\r\n    </>\r\n  )\r\n\r\n  return (\r\n    <div className=\"game-board\">\r\n      <div className=\"table\">{cardsOnTableInRows}</div>\r\n      <div className=\"players-hands\">{playersHands}</div>\r\n      <div className=\"button\">\r\n        <Button\r\n          text={btnText}\r\n          additionalClasses=\"big\"\r\n          click={() => {\r\n            if (canClickOnButton) {\r\n              handleClickOnNextCardBtn()\r\n            }\r\n          }}\r\n        />\r\n\r\n        <div className=\"info\">\r\n          {giveSipsNumber !== 0 && giveSipsInfo}\r\n          {sipsInfo.length !== 0 && sipsInfoText}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GameTable\r\n","import React, { useState, useEffect } from 'react'\r\nimport PlayerHand from '../components/PlayerHand'\r\nimport GameTable from '../components/GameTable'\r\nimport Card from '../components/Card'\r\n\r\nconst GameBoard = ({ game, setGame, players, setPlayers }) => {\r\n  const initialStates = {\r\n    btnText: 'Next card',\r\n    canClickOnButton: true,\r\n    giveSips: [],\r\n    giveSipsNumber: 0,\r\n    giveSipsNumberSelected: 0,\r\n    sipsInfo: [],\r\n    forceEnd: false,\r\n  }\r\n  const [btnText, setBtnText] = useState(initialStates.btnText)\r\n  const [canClickOnButton, setCanClickOnButton] = useState(\r\n    initialStates.canClickOnButton\r\n  )\r\n  const [giveSips, setGiveSips] = useState(initialStates.giveSips)\r\n\r\n  const [giveSipsNumber, setGiveSipsNumber] = useState(\r\n    initialStates.giveSipsNumber\r\n  )\r\n  const [giveSipsNumberSelected, setGiveSipsNumberSelected] = useState(\r\n    initialStates.giveSipsNumberSelected\r\n  )\r\n  const [sipsInfo, setSipsInfo] = useState(initialStates.sipsInfo)\r\n  const [forceEnd, setForceEnd] = useState(initialStates.forceEnd)\r\n\r\n  //RESET\r\n  const reset = () => {\r\n    setBtnText(initialStates.btnText)\r\n    setCanClickOnButton(initialStates.canClickOnButton)\r\n    setGiveSips(initialStates.giveSips)\r\n  }\r\n\r\n  useEffect(() => {\r\n    reset()\r\n    return () => {\r\n      reset()\r\n    }\r\n  }, [])\r\n\r\n  const changeScreenToKierowca = () => {\r\n    setTimeout(() => {\r\n      setGame((prev) => ({\r\n        ...prev,\r\n        gameBoardScreenVisible: false,\r\n        kierowcaAutubusuScreenVisible: true,\r\n      }))\r\n    }, 1000)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (giveSips.length) {\r\n      setCanClickOnButton(false)\r\n\r\n      // alow click on player hand but not on current player hand\r\n      const currentPlayer = giveSips[0].player\r\n      const sips = giveSips[0].sips\r\n      setPlayers([\r\n        ...players.map((player) => {\r\n          player.canClickOnHand = !(player.id === currentPlayer.id)\r\n          return player\r\n        }),\r\n      ])\r\n      setGiveSipsNumber(sips)\r\n      setGiveSipsNumberSelected(1)\r\n    } else {\r\n      setCanClickOnButton(true)\r\n      setPlayers([\r\n        ...players.map((player) => {\r\n          player.canClickOnHand = false\r\n          return player\r\n        }),\r\n      ])\r\n\r\n      const thereIsInactiveCardOnTable =\r\n        game.cardsOnTable.findIndex((card) => !card.active) !== -1\r\n\r\n      if (!thereIsInactiveCardOnTable) {\r\n        changeScreenToKierowca()\r\n      }\r\n    }\r\n  }, [giveSips])\r\n\r\n  useEffect(() => {\r\n    if (forceEnd) {\r\n      changeScreenToKierowca()\r\n    }\r\n  }, [forceEnd])\r\n\r\n  const handleChangeSipsNumberToGive = (e) => {\r\n    const number = e.target.value\r\n    setGiveSipsNumberSelected(number)\r\n  }\r\n\r\n  const handleClickOnNextCardBtn = () => {\r\n    setSipsInfo([])\r\n    const cardIndex = game.cardsOnTable.findIndex((card) => !card.active)\r\n\r\n    if (cardIndex !== -1) {\r\n      const card = game.cardsOnTable[cardIndex]\r\n      const cardId = card.id\r\n\r\n      const playersThatHaveTheSameCard = players.filter((player) => {\r\n        let sameCard = false\r\n        const symbol = card.symbol\r\n        player.cards.forEach((card) => {\r\n          if (card.symbol === symbol) {\r\n            sameCard = true\r\n          }\r\n        })\r\n        if (sameCard) {\r\n          return player\r\n        }\r\n      })\r\n\r\n      if (playersThatHaveTheSameCard.length) {\r\n        playersThatHaveTheSameCard.forEach((playerWithTheSameCard) => {\r\n          const playerCards = [...playerWithTheSameCard.cards]\r\n\r\n          playerCards.forEach((playerCard, i) => {\r\n            if (playerCard.symbol === card.symbol) {\r\n              if (card.action.type === 'drink') {\r\n                //TODO: CHANGE THIS TO FN TO NOT REPEAT CODE\r\n                const newPlayers = players.map((player) => {\r\n                  if (player.id === playerWithTheSameCard.id) {\r\n                    player.sips = player.sips + card.action.number\r\n\r\n                    const isThisPlayerAlreadyInSipsInfo =\r\n                      sipsInfo.findIndex(\r\n                        (sipInfo) =>\r\n                          sipInfo.name.toLowerCase() ===\r\n                          player.name.toLowerCase()\r\n                      ) !== -1\r\n\r\n                    if (isThisPlayerAlreadyInSipsInfo) {\r\n                      const newSipsInfo = sipsInfo.map((sipInfo) => {\r\n                        if (sipInfo.name === player.name) {\r\n                          sipInfo.sips = sipInfo.sips + card.action.number\r\n                        }\r\n                        return sipInfo\r\n                      })\r\n                      setSipsInfo([...newSipsInfo])\r\n                    } else {\r\n                      const newSipsInfoElement = {\r\n                        name: player.name,\r\n                        sips: card.action.number,\r\n                      }\r\n                      setSipsInfo((prev) => [...prev, newSipsInfoElement])\r\n                    }\r\n                  }\r\n                  return player\r\n                })\r\n\r\n                setPlayers([...newPlayers])\r\n              } else if (card.action.type === 'give') {\r\n                // THIS SECTION CAN BE COMMENTED FOR EASIER DEVELOPMENT\r\n                // UNCOMMENT FOR CORRECT GAMEPLAY\r\n                //\r\n                setGiveSips((prev) => [\r\n                  ...prev,\r\n                  {\r\n                    player: playerWithTheSameCard,\r\n                    sips: card.action.number,\r\n                  },\r\n                ])\r\n              } else if (card.action.type === 'kierowca') {\r\n                setGame((prev) => ({\r\n                  ...prev,\r\n                  playersWithKierowca: [\r\n                    ...prev.playersWithKierowca,\r\n                    playerWithTheSameCard,\r\n                  ],\r\n                }))\r\n                setGiveSips((prev) => [\r\n                  ...prev,\r\n                  {\r\n                    player: playerWithTheSameCard,\r\n                    sips: card.action.number,\r\n                  },\r\n                ])\r\n                // TODO: REPATED CODE - CHANGE\r\n                const newPlayers = players.map((player) => {\r\n                  if (player.id === playerWithTheSameCard.id) {\r\n                    player.sips = player.sips + card.action.number\r\n\r\n                    const isThisPlayerAlreadyInSipsInfo =\r\n                      sipsInfo.findIndex(\r\n                        (sipInfo) =>\r\n                          sipInfo.name.toLowerCase() ===\r\n                          player.name.toLowerCase()\r\n                      ) !== -1\r\n\r\n                    if (isThisPlayerAlreadyInSipsInfo) {\r\n                      const newSipsInfo = sipsInfo.map((sipInfo) => {\r\n                        if (sipInfo.name === player.name) {\r\n                          sipInfo.sips = sipInfo.sips + card.action.number\r\n                        }\r\n                        return sipInfo\r\n                      })\r\n                      setSipsInfo([...newSipsInfo])\r\n                    } else {\r\n                      const newSipsInfoElement = {\r\n                        name: player.name,\r\n                        sips: card.action.number,\r\n                      }\r\n                      setSipsInfo((prev) => [...prev, newSipsInfoElement])\r\n                    }\r\n                  }\r\n                  return player\r\n                })\r\n\r\n                setPlayers([...newPlayers])\r\n              }\r\n            }\r\n          })\r\n        })\r\n      } else {\r\n        if (card.action.type === 'kierowca') {\r\n          setForceEnd(true)\r\n        }\r\n      }\r\n\r\n      //\r\n\r\n      const newCardsOnTable = game.cardsOnTable.map((card) => {\r\n        if (card.id === cardId) {\r\n          card.active = true\r\n        }\r\n        return card\r\n      })\r\n      setGame((prev) => ({\r\n        ...prev,\r\n        cardsOnTable: [...newCardsOnTable],\r\n      }))\r\n    }\r\n  }\r\n\r\n  const handleClickOnPlayer = (id) => {\r\n    if (giveSips.length) {\r\n      const sips = parseInt(giveSipsNumberSelected)\r\n\r\n      const newPlayers = players.map((player) => {\r\n        if (player.id === id) {\r\n          player.sips = player.sips + sips\r\n        }\r\n        return player\r\n      })\r\n      setPlayers([...newPlayers])\r\n\r\n      const newGiveSips =\r\n        sips === giveSipsNumber\r\n          ? giveSips.filter((sip, index) => index !== 0)\r\n          : giveSips.map((sip, index) => {\r\n              if (index === 0) {\r\n                sip.sips = sip.sips - sips\r\n              }\r\n              return sip\r\n            })\r\n\r\n      setGiveSips([...newGiveSips])\r\n\r\n      setGiveSipsNumber((prev) => prev - sips)\r\n      setGiveSipsNumberSelected(1)\r\n    }\r\n  }\r\n\r\n  const cardsOnTableNoRows = game.cardsOnTable.map((card) => (\r\n    <Card\r\n      onHand={false}\r\n      symbol={card.symbol}\r\n      color={card.color}\r\n      key={card.id}\r\n      active={card.active}\r\n      action={card.action}\r\n    />\r\n  ))\r\n\r\n  const cardsOnTableInRows = (\r\n    <>\r\n      <div className=\"row row-1\">{cardsOnTableNoRows.splice(0, 1)}</div>\r\n      <div className=\"row row-2\">{cardsOnTableNoRows.splice(0, 2)}</div>\r\n      <div className=\"row row-3\">{cardsOnTableNoRows.splice(0, 3)}</div>\r\n      <div className=\"row row-4\">{cardsOnTableNoRows.splice(0, 4)}</div>\r\n      <div className=\"row row-5\">{cardsOnTableNoRows.splice(0, 5)}</div>\r\n      <div className=\"row row-1\">{cardsOnTableNoRows.splice(0, 1)}</div>\r\n    </>\r\n  )\r\n\r\n  const playersHands = players.map((player) => {\r\n    return (\r\n      <PlayerHand\r\n        cards={player.cards}\r\n        name={player.name}\r\n        sips={player.sips}\r\n        id={player.id}\r\n        key={player.id}\r\n        canClickOnHand={player.canClickOnHand}\r\n        click={() => handleClickOnPlayer(player.id)}\r\n      />\r\n    )\r\n  })\r\n  return (\r\n    <GameTable\r\n      canClickOnButton={canClickOnButton}\r\n      btnText={btnText}\r\n      cardsOnTableInRows={cardsOnTableInRows}\r\n      playersHands={playersHands}\r\n      handleClickOnNextCardBtn={handleClickOnNextCardBtn}\r\n      giveSipsNumber={giveSipsNumber}\r\n      handleChangeSipsNumberToGive={handleChangeSipsNumberToGive}\r\n      sipsInfo={sipsInfo}\r\n    />\r\n  )\r\n}\r\n\r\nexport default GameBoard\r\n","import React, { useState } from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nconst AddPlayerCard = ({\r\n  type = \"normal\",\r\n  name,\r\n  id,\r\n  handleAddPlayer,\r\n  handleRemovePlayer\r\n}) => {\r\n  const [add, setAdd] = useState({\r\n    name: \"\"\r\n  });\r\n  const handleChange = e => {\r\n    const name = e.target.value;\r\n    setAdd({ name });\r\n  };\r\n  const handleKeyDown = e => {\r\n    if (e.which === 13) {\r\n      e.preventDefault();\r\n      handleAddPlayer(add.name, resetName);\r\n    }\r\n  };\r\n\r\n  const resetName = () => setAdd({ name: \"\" });\r\n  return (\r\n    <div className={`add-player-card ${type}`}>\r\n      {type === \"normal\" ? (\r\n        <>\r\n          <div className=\"name\">{name}</div>\r\n          <Button\r\n            text=\"-\"\r\n            additionalClasses=\"delete\"\r\n            click={() => handleRemovePlayer(id)}\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={add.name}\r\n            onChange={e => handleChange(e)}\r\n            onKeyDown={e => handleKeyDown(e)}\r\n            placeholder=\"Name\"\r\n          />\r\n          <Button\r\n            text=\"+\"\r\n            additionalClasses=\"add-new\"\r\n            click={() => handleAddPlayer(add.name, resetName)}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default AddPlayerCard;\r\n","const createPlayer = ({\r\n  name,\r\n  id,\r\n  cards = [],\r\n  initialPhaseOneCompleted = false,\r\n  initialPhaseTwoCompleted = false,\r\n  sips = 0,\r\n  canClickOnHand = false\r\n}) => ({\r\n  id,\r\n  name,\r\n  cards,\r\n  initialPhaseOneCompleted,\r\n  initialPhaseTwoCompleted,\r\n  sips,\r\n  canClickOnHand\r\n});\r\n\r\nexport default createPlayer;\r\n","import React from 'react'\r\nimport AddPlayerCard from '../components/AddPlayerCard'\r\nimport Button from '../components/Button'\r\nimport createPlayer from '../functions/createPlayer'\r\n\r\nconst StartScreen = ({ game, setGame, players, setPlayers }) => {\r\n  const { numberOfPlayers } = game\r\n  const handleAddPlayer = (name, resetName) => {\r\n    let allowToAddPlayer = true\r\n    if (players.length) {\r\n      players.forEach((player) => {\r\n        if (player.name.toLowerCase() === name.toLowerCase()) {\r\n          allowToAddPlayer = false\r\n        }\r\n      })\r\n    }\r\n    if (name && allowToAddPlayer) {\r\n      const newPlayer = createPlayer({\r\n        name,\r\n        id: numberOfPlayers + 1,\r\n        cards: [],\r\n      })\r\n      setPlayers((prev) => [...prev, newPlayer])\r\n      resetName()\r\n      setGame((prev) => ({\r\n        ...prev,\r\n        numberOfPlayers: prev.numberOfPlayers + 1,\r\n      }))\r\n    }\r\n  }\r\n  //\r\n  const handleRemovePlayer = (id) => {\r\n    const newPlayers = players.filter((player) => player.id !== id)\r\n    setPlayers([...newPlayers])\r\n    setGame((prev) => ({\r\n      ...prev,\r\n      numberOfPlayers: prev.numberOfPlayers - 1,\r\n    }))\r\n  }\r\n  //\r\n  const startGame = () => {\r\n    if (game.numberOfPlayers > 1) {\r\n      setGame((prev) => ({\r\n        ...prev,\r\n        startScreenVisible: false,\r\n        gameInitialPhaseScreenVisible: true,\r\n      }))\r\n    }\r\n  }\r\n  //\r\n  const userCards = players.map((player) => (\r\n    <AddPlayerCard\r\n      name={player.name}\r\n      id={player.id}\r\n      key={player.id}\r\n      handleRemovePlayer={handleRemovePlayer}\r\n    />\r\n  ))\r\n  //\r\n  return (\r\n    <div className=\"start-screen\">\r\n      <div className=\"filled\">\r\n        <div className=\"upper\">\r\n          {userCards}\r\n          {numberOfPlayers < 20 && (\r\n            <AddPlayerCard type=\"addNew\" handleAddPlayer={handleAddPlayer} />\r\n          )}\r\n        </div>\r\n        <div className=\"bottom\">\r\n          <Button click={startGame} text=\"Start\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default StartScreen\r\n","import React, { useState, useEffect } from 'react'\r\nimport Card from '../components/Card'\r\n\r\nconst InitialPhaseScreen = ({ game, setGame, players, setPlayers }) => {\r\n  const initialGameInitialState = {\r\n    completed: false,\r\n    phase: 1,\r\n    currentPlayer: players[0],\r\n    shouldChangeCurrentPlayer: false,\r\n    canClick: true,\r\n  }\r\n  const [initialGame, setInitialGame] = useState({\r\n    ...initialGameInitialState,\r\n  })\r\n\r\n  //RESET\r\n  const reset = () => {\r\n    setInitialGame({ ...initialGameInitialState })\r\n  }\r\n  useEffect(() => {\r\n    reset()\r\n    return () => {\r\n      reset()\r\n    }\r\n  }, [])\r\n\r\n  const {\r\n    phase,\r\n    currentPlayer,\r\n    shouldChangeCurrentPlayer,\r\n    canClick,\r\n  } = initialGame\r\n\r\n  useEffect(() => {\r\n    if (shouldChangeCurrentPlayer) {\r\n      //change current player or end of the initial phase\r\n      const playerId = currentPlayer.id\r\n      const lastPlayerId = players[players.length - 1].id\r\n\r\n      if (playerId === lastPlayerId) {\r\n        //current player is last player\r\n        setGame((prev) => ({\r\n          ...prev,\r\n          gameInitialPhaseScreenVisible: false,\r\n          gameBoardScreenVisible: true,\r\n        }))\r\n      } else {\r\n        //take next player as current player\r\n        const id = players.findIndex((player) => player.id === playerId) + 1\r\n        const player = players[id]\r\n        setInitialGame((prev) => ({\r\n          ...prev,\r\n          currentPlayer: player,\r\n        }))\r\n      }\r\n      setInitialGame((prev) => ({\r\n        ...prev,\r\n        shouldChangeCurrentPlayer: false,\r\n      }))\r\n    }\r\n  }, [phase])\r\n\r\n  const handleClick = (option) => {\r\n    if (canClick) {\r\n      const playerId = currentPlayer.id\r\n\r\n      //phase 1\r\n      if (option === 'red' || option === 'black') {\r\n        const colorOfCurrentCard = currentPlayer.cards[0].color\r\n\r\n        const newPlayers = players.map((player) => {\r\n          if (player.id === playerId) {\r\n            player.initialPhaseOneCompleted = true\r\n            if (option !== colorOfCurrentCard) {\r\n              //if not win\r\n              player.sips = player.sips + 1\r\n            }\r\n          }\r\n          return player\r\n        })\r\n\r\n        setPlayers([...newPlayers])\r\n        setInitialGame((prev) => ({\r\n          ...prev,\r\n          phase: 2,\r\n        }))\r\n      } else if (option === 'more' || option === 'less' || option === 'same') {\r\n        //phase 2\r\n        const figures = [\r\n          '2',\r\n          '3',\r\n          '4',\r\n          '5',\r\n          '6',\r\n          '7',\r\n          '8',\r\n          '9',\r\n          '10',\r\n          'J',\r\n          'Q',\r\n          'K',\r\n          'A',\r\n        ]\r\n        const indexOfFirstCardFigure = figures.findIndex(\r\n          (figure) => figure === currentPlayer.cards[0].symbol\r\n        )\r\n        const indexOfSecondCardFigure = figures.findIndex(\r\n          (figure) => figure === currentPlayer.cards[1].symbol\r\n        )\r\n        const reduce = indexOfSecondCardFigure - indexOfFirstCardFigure\r\n        let win = false\r\n        if (\r\n          (option === 'more' && reduce > 0) ||\r\n          (option === 'same' && reduce === 0) ||\r\n          (option === 'less' && reduce < 0)\r\n        ) {\r\n          win = true\r\n        }\r\n        if (win) {\r\n          const newPlayers = players.map((player) => {\r\n            if (player.id === playerId) {\r\n              player.initialPhaseTwoCompleted = true\r\n            }\r\n            return player\r\n          })\r\n          setPlayers([...newPlayers])\r\n        } else {\r\n          const newPlayers = players.map((player) => {\r\n            if (player.id === playerId) {\r\n              player.initialPhaseTwoCompleted = true\r\n              player.sips = player.sips + 1\r\n            }\r\n            return player\r\n          })\r\n          setPlayers([...newPlayers])\r\n        }\r\n\r\n        setInitialGame((prev) => ({\r\n          ...prev,\r\n          canClick: false,\r\n        }))\r\n\r\n        setTimeout(() => {\r\n          setInitialGame((prev) => ({\r\n            ...prev,\r\n            phase: 1,\r\n            shouldChangeCurrentPlayer: true,\r\n            canClick: true,\r\n          }))\r\n        }, 1000)\r\n      }\r\n    }\r\n  }\r\n\r\n  const options = (\r\n    <ul>\r\n      {initialGame.phase === 1 ? (\r\n        <>\r\n          <li onClick={() => handleClick('red')}>Red</li>\r\n          <li onClick={() => handleClick('black')}>Black</li>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <li onClick={() => handleClick('more')}>More</li>\r\n          <li onClick={() => handleClick('same')}>Same</li>\r\n          <li onClick={() => handleClick('less')}>Less</li>\r\n        </>\r\n      )}\r\n    </ul>\r\n  )\r\n\r\n  const cards = (\r\n    <ul>\r\n      {currentPlayer &&\r\n        initialGame.currentPlayer.cards.map((card, i) => (\r\n          <Card\r\n            key={i}\r\n            symbol={card.symbol}\r\n            color={card.color}\r\n            active={\r\n              i % 2\r\n                ? initialGame.currentPlayer.initialPhaseTwoCompleted\r\n                : initialGame.currentPlayer.initialPhaseOneCompleted\r\n            }\r\n          />\r\n        ))}\r\n    </ul>\r\n  )\r\n\r\n  return (\r\n    <div className=\"initial-phase\">\r\n      <div className=\"current-player-name\">\r\n        Current player: {currentPlayer && currentPlayer.name}\r\n      </div>\r\n      <div className=\"options\">{options}</div>\r\n      <div className=\"cards\">{cards}</div>\r\n      <div className=\"sips-meter\">\r\n        Sips of current player: {currentPlayer && currentPlayer.sips}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InitialPhaseScreen\r\n","let apiKeys = null\r\ntry {\r\n  apiKeys = require('../apiKeys.json')\r\n} catch (e) {}\r\n\r\nconst getGender = async (name) => {\r\n  if (!apiKeys) {\r\n    return { gender: null, accuracy: 0 }\r\n  }\r\n  const apiKey = apiKeys.genderApi\r\n\r\n  if (apiKey) {\r\n    const url = `https://gender-api.com/get?name=${name}&key=${apiKey}`\r\n    let result = null\r\n\r\n    await fetch(url)\r\n      .then((res) => res.json())\r\n      .then((res) => (result = res))\r\n      .catch((err) => {\r\n        console.log('ERROR: ' + err)\r\n        result = { gender: null, accuracy: 0 }\r\n      })\r\n\r\n    return result\r\n  } else {\r\n    return { gender: null, accuracy: 0 }\r\n  }\r\n}\r\n\r\nexport default getGender\r\n","const randomizeArrayOrder = array => {\r\n  const newArray = [...array];\r\n  for (let i = 0; i < 15; i++) {\r\n    newArray.sort(() => Math.random() - 0.5);\r\n  }\r\n  return newArray;\r\n};\r\n\r\nexport default randomizeArrayOrder;\r\n","import React, { useState, useEffect } from 'react'\r\nimport Button from '../components/Button'\r\nimport Card from '../components/Card'\r\n\r\nimport getGender from '../functions/getGender'\r\nimport randomizeArrayOrder from '../functions/randomizeArrayOrder'\r\n\r\nconst KierowcaAutobusuPhaseScreen = ({\r\n  game,\r\n  players,\r\n  setPlayers,\r\n  handleGameReset,\r\n}) => {\r\n  const allPlayers = [...players]\r\n  const initialKierowcaState = {\r\n    cardsInDeck: randomizeArrayOrder(game.cardsInGame),\r\n    playersWithKierowca: game.playersWithKierowca,\r\n    currentPlayer: game.playersWithKierowca[0],\r\n    phase: 1,\r\n    cardsOnTheTable: [],\r\n    numberOfCardsLeft: game.cardsInGame.length,\r\n    infoText: '',\r\n    gameOver: false,\r\n    canClick: true,\r\n  }\r\n\r\n  const [kierowca, setKierowca] = useState({\r\n    ...initialKierowcaState,\r\n  })\r\n\r\n  const {\r\n    cardsInDeck,\r\n    playersWithKierowca,\r\n    currentPlayer,\r\n    phase,\r\n    cardsOnTheTable,\r\n    numberOfCardsLeft,\r\n    infoText,\r\n    canClick,\r\n  } = kierowca\r\n  //\r\n\r\n  //RESET\r\n  const reset = () => {\r\n    setKierowca({\r\n      ...initialKierowcaState,\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    reset()\r\n    return () => {\r\n      reset()\r\n    }\r\n  }, [])\r\n\r\n  const card = cardsInDeck[0]\r\n  const currentPlayerId = currentPlayer ? currentPlayer.id : null\r\n\r\n  const correctChoice = () => {\r\n    setKierowca((prev) => ({\r\n      ...prev,\r\n      cardsOnTheTable: [...prev.cardsOnTheTable, card],\r\n      phase: prev.phase + 1,\r\n    }))\r\n  }\r\n\r\n  const incorrectChoice = () => {\r\n    const newPlayers = allPlayers.map((player) => {\r\n      if (player.id === currentPlayerId) {\r\n        player.sips += 1\r\n      }\r\n      return player\r\n    })\r\n    setPlayers([...newPlayers])\r\n    setKierowca((prev) => ({\r\n      ...prev,\r\n      cardsOnTheTable: [...prev.cardsOnTheTable, card],\r\n      canClick: false,\r\n    }))\r\n\r\n    setTimeout(() => {\r\n      setKierowca((prev) => ({\r\n        ...prev,\r\n        cardsOnTheTable: [],\r\n        phase: 1,\r\n        canClick: true,\r\n      }))\r\n    }, 1000)\r\n\r\n    getText(false)\r\n  }\r\n\r\n  const getText = async (updateCurrentPlayer) => {\r\n    const sipsNumber = currentPlayer.sips\r\n    let text = ''\r\n\r\n    if (updateCurrentPlayer) {\r\n      const genderInfo = await getGender(currentPlayer.name)\r\n      const { gender, accuracy } = genderInfo\r\n\r\n      if (accuracy < 66) {\r\n        text += `Number of sips: ${currentPlayer.sips}`\r\n      } else {\r\n        text += `${gender === 'male' ? 'He' : 'She'} have total ${sipsNumber} ${\r\n          sipsNumber === 1 ? 'sip' : 'sips'\r\n        }`\r\n      }\r\n    } else {\r\n      const arrayFromString = infoText.split('')\r\n\r\n      const index = arrayFromString.findIndex((char) => {\r\n        return /^[0-9]$/.test(char)\r\n      })\r\n\r\n      arrayFromString.splice(index, arrayFromString.length - 1)\r\n\r\n      text = arrayFromString.join('') + sipsNumber\r\n    }\r\n    if (text) {\r\n      setKierowca((prev) => ({\r\n        ...prev,\r\n        infoText: text,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const nextPlayer = () => {\r\n    setKierowca((prev) => ({\r\n      ...prev,\r\n      cardsInDeck: randomizeArrayOrder(game.cardsInGame),\r\n      playersWithKierowca: prev.playersWithKierowca.filter(\r\n        (player, i) => i !== 0\r\n      ),\r\n      phase: 1,\r\n      cardsOnTheTable: [],\r\n    }))\r\n  }\r\n\r\n  const gameOver = () => {\r\n    setKierowca((prev) => ({\r\n      ...prev,\r\n      cardsInDeck: 0,\r\n      numberOfCardsLeft: 0,\r\n    }))\r\n    setTimeout(() => {\r\n      setKierowca((prev) => ({\r\n        ...prev,\r\n        gameOver: true,\r\n      }))\r\n    }, 1000)\r\n  }\r\n\r\n  const handleClick = (type) => {\r\n    if (canClick) {\r\n      if (type === 'black' || type === 'red') {\r\n        const color = card.color\r\n        const correct = type === color\r\n\r\n        if (correct) {\r\n          correctChoice()\r\n        } else {\r\n          incorrectChoice()\r\n        }\r\n      } else {\r\n        const figures = [\r\n          '2',\r\n          '3',\r\n          '4',\r\n          '5',\r\n          '6',\r\n          '7',\r\n          '8',\r\n          '9',\r\n          '10',\r\n          'J',\r\n          'Q',\r\n          'K',\r\n          'A',\r\n        ]\r\n        const previousCard = cardsOnTheTable[cardsOnTheTable.length - 1]\r\n\r\n        const indexOfPreviousCardSymbol = figures.findIndex(\r\n          (figure) => figure === previousCard.symbol\r\n        )\r\n        const indexOfClickedCardSymbol = figures.findIndex(\r\n          (figure) => figure === card.symbol\r\n        )\r\n        const reduce = indexOfClickedCardSymbol - indexOfPreviousCardSymbol\r\n\r\n        let correct = false\r\n        if (\r\n          (type === 'more' && reduce > 0) ||\r\n          (type === 'same' && reduce === 0) ||\r\n          (type === 'less' && reduce < 0)\r\n        ) {\r\n          correct = true\r\n        }\r\n\r\n        if (correct) {\r\n          correctChoice()\r\n        } else {\r\n          incorrectChoice()\r\n        }\r\n      }\r\n\r\n      setKierowca((prev) => ({\r\n        ...prev,\r\n        cardsInDeck: prev.cardsInDeck.filter((card, i) => i !== 0),\r\n      }))\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (phase === 6) {\r\n      setTimeout(() => {\r\n        if (playersWithKierowca.length > 1) {\r\n          nextPlayer()\r\n        } else {\r\n          gameOver()\r\n        }\r\n      }, 1000)\r\n    }\r\n  }, [phase])\r\n\r\n  useEffect(() => {\r\n    if (currentPlayer) {\r\n      getText(true)\r\n    }\r\n  }, [currentPlayer])\r\n\r\n  useEffect(() => {\r\n    if (!cardsInDeck.length) {\r\n      if (playersWithKierowca.length) {\r\n        nextPlayer()\r\n      } else {\r\n        gameOver()\r\n      }\r\n    }\r\n  }, [cardsInDeck])\r\n\r\n  useEffect(() => {\r\n    if (playersWithKierowca.length) {\r\n      setKierowca((prev) => ({\r\n        ...prev,\r\n        currentPlayer: prev.playersWithKierowca[0],\r\n      }))\r\n    } else {\r\n      gameOver()\r\n    }\r\n  }, [playersWithKierowca])\r\n\r\n  useEffect(() => {\r\n    setKierowca((prev) => ({\r\n      ...prev,\r\n      numberOfCardsLeft: cardsInDeck.length,\r\n    }))\r\n  }, [cardsInDeck])\r\n\r\n  useEffect(() => {\r\n    const players = allPlayers.map((player) => {\r\n      playersWithKierowca.forEach((playerWithKierowca) => {\r\n        if (player.id === playerWithKierowca.id) {\r\n          player.sips = playerWithKierowca.sips\r\n        }\r\n      })\r\n      return player\r\n    })\r\n\r\n    setPlayers([...players])\r\n  }, [playersWithKierowca])\r\n\r\n  let content = ''\r\n\r\n  if (!kierowca.gameOver) {\r\n    const phaseOneButtons = (\r\n      <>\r\n        <li onClick={() => handleClick('red')}>Red</li>\r\n        <li onClick={() => handleClick('black')}>Black</li>\r\n      </>\r\n    )\r\n    const phaseTwoAndMoreButtons = (\r\n      <>\r\n        <li onClick={() => handleClick('more')}>More</li>\r\n        <li onClick={() => handleClick('same')}>Same</li>\r\n        <li onClick={() => handleClick('less')}>Less</li>\r\n      </>\r\n    )\r\n    const buttons = (\r\n      <ul>{phase === 1 ? phaseOneButtons : phaseTwoAndMoreButtons}</ul>\r\n    )\r\n    const cards = cardsOnTheTable.map((card) => (\r\n      <Card\r\n        symbol={card.symbol}\r\n        key={card.id}\r\n        id={card.id}\r\n        color={card.color}\r\n        active={true}\r\n      />\r\n    ))\r\n\r\n    content = (\r\n      <div className=\"kierowca\">\r\n        <div className=\"info-top\">{`Current player: ${currentPlayer.name}`}</div>\r\n        <div className=\"buttons\">{buttons}</div>\r\n        <div className=\"cards\">{cards}</div>\r\n        <div className=\"info\">\r\n          <div className=\"info-1\">{infoText}</div>\r\n          <div className=\"info-2\">{`Number of cards left: ${numberOfCardsLeft}`}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    const scores = (\r\n      <ul>\r\n        {players.map((player) => (\r\n          <li className=\"player\" key={player.id}>\r\n            <h3>Name: {player.name}</h3>\r\n            <p>Sips: {player.sips}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    )\r\n    content = (\r\n      <div className=\"end-screen\">\r\n        <h1>The End</h1>\r\n        <Button\r\n          text=\"reset\"\r\n          additionalClasses=\"upper\"\r\n          click={handleGameReset}\r\n        />\r\n        <div className=\"scores\">\r\n          <h1>Total scores</h1>\r\n          <ul>{scores}</ul>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return <div className=\"kierowca-screen\">{content}</div>\r\n}\r\n\r\nexport default KierowcaAutobusuPhaseScreen\r\n","const createCard = ({ id, symbol, color, onHand, active }) => ({\r\n  id,\r\n  symbol,\r\n  color,\r\n  onHand,\r\n  active\r\n});\r\n\r\nexport default createCard;\r\n","import React, { useState, useEffect } from 'react'\r\nimport MainWrapper from './components/MainWrapper'\r\nimport GameBoardScreen from './stages/GameBoardScreen'\r\nimport StartScreen from './stages/StartScreen'\r\nimport InitialPhaseScreen from './stages/InitialPhaseScreen'\r\nimport KierowcaAutobusuPhaseScreen from './stages/KierowcaAutobusuPhaseScreen'\r\n\r\nimport createCard from './functions/createCard'\r\nimport randomizeArrayOrder from './functions/randomizeArrayOrder'\r\n\r\nconst App = () => {\r\n  const initialGameState = {\r\n    numberOfPlayers: 0,\r\n    cardsInGame: [],\r\n    cardsOnTable: [],\r\n    activeCard: null,\r\n    startScreenVisible: true,\r\n    gameInitialPhaseScreenVisible: false,\r\n    gameBoardScreenVisible: false,\r\n    kierowcaAutubusuScreenVisible: false,\r\n    playersWithKierowca: [],\r\n  }\r\n  const [game, setGame] = useState({\r\n    ...initialGameState,\r\n  })\r\n  const [players, setPlayers] = useState([])\r\n\r\n  const handleGameReset = () => {\r\n    setGame({\r\n      ...initialGameState,\r\n    })\r\n    setPlayers([])\r\n  }\r\n\r\n  const generateCards = (recursiveFunction) => {\r\n    const figures = [\r\n      { id: 1, symbol: 'A' },\r\n      { id: 2, symbol: 'K' },\r\n      { id: 3, symbol: 'Q' },\r\n      { id: 4, symbol: 'J' },\r\n      { id: 5, symbol: '10' },\r\n      { id: 6, symbol: '9' },\r\n      { id: 7, symbol: '8' },\r\n      { id: 8, symbol: '7' },\r\n      { id: 9, symbol: '6' },\r\n      { id: 10, symbol: '5' },\r\n      { id: 11, symbol: '4' },\r\n      { id: 12, symbol: '3' },\r\n      { id: 13, symbol: '2' },\r\n    ]\r\n\r\n    let cardsPossible = []\r\n    let figuresPossible = []\r\n\r\n    const howManyCards = 16 + game.numberOfPlayers * 2\r\n\r\n    let howManyFigures = 0\r\n\r\n    howManyFigures = Math.floor(howManyCards / 4)\r\n    if (howManyCards % 4 !== 0) {\r\n      howManyFigures++\r\n    }\r\n\r\n    for (let i = 0; i < howManyFigures; i++) {\r\n      figuresPossible = [\r\n        ...figuresPossible,\r\n        ...figures.filter((card) => card.id === i + 1),\r\n      ]\r\n    }\r\n\r\n    let cardIndex = 0\r\n    for (let i = 0; i < figuresPossible.length; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        const card = createCard({\r\n          id: cardIndex + 1,\r\n          symbol: figuresPossible[i].symbol,\r\n          color: j % 2 ? 'red' : 'black',\r\n          active: false,\r\n        })\r\n        cardsPossible.push(card)\r\n        cardIndex++\r\n      }\r\n    }\r\n\r\n    let cardsPossibleRandom = randomizeArrayOrder(cardsPossible)\r\n\r\n    let tableCards = [...cardsPossibleRandom.splice(0, 16)]\r\n    const playersCards = [...cardsPossibleRandom]\r\n\r\n    const kierowcaCard = tableCards[tableCards.length - 1]\r\n\r\n    let playerWithKierowcaExisting = false\r\n\r\n    playersCards.forEach((card) => {\r\n      if (card.symbol === kierowcaCard.symbol) {\r\n        playerWithKierowcaExisting = true\r\n      }\r\n    })\r\n\r\n    if (!playerWithKierowcaExisting) {\r\n      return recursiveFunction(recursiveFunction)\r\n    }\r\n\r\n    const cardsInGame = [...tableCards, ...playersCards]\r\n\r\n    setGame((prev) => ({\r\n      ...prev,\r\n      cardsInGame: [...cardsInGame],\r\n    }))\r\n\r\n    // generate cards on table\r\n    const cardsOnTable = [...tableCards]\r\n\r\n    // ganerate cards on hands\r\n    for (let i = 0; i < game.numberOfPlayers; i++) {\r\n      const cardsOnHand = playersCards.splice(0, 2)\r\n      const newPlayers = [...players]\r\n      newPlayers[i].cards = cardsOnHand\r\n\r\n      setPlayers([...newPlayers])\r\n    }\r\n\r\n    const cardsOnTableWithActions = cardsOnTable.map((card, index) => {\r\n      let action = null\r\n\r\n      if (index === 0) {\r\n        action = {\r\n          type: 'drink',\r\n          number: 1,\r\n        }\r\n      } else if (index < 3) {\r\n        action = {\r\n          type: 'give',\r\n          number: 2,\r\n        }\r\n      } else if (index < 6) {\r\n        action = {\r\n          type: 'drink',\r\n          number: 3,\r\n        }\r\n      } else if (index < 10) {\r\n        action = {\r\n          type: 'give',\r\n          number: 4,\r\n        }\r\n      } else if (index < 15) {\r\n        action = {\r\n          type: 'drink',\r\n          number: 5,\r\n        }\r\n      } else {\r\n        action = {\r\n          type: 'kierowca',\r\n          number: 6,\r\n        }\r\n      }\r\n\r\n      card.action = action\r\n\r\n      return card\r\n    })\r\n\r\n    setGame((prev) => ({\r\n      ...prev,\r\n      cardsOnTable: cardsOnTableWithActions,\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!game.startScreenVisible) {\r\n      generateCards(generateCards)\r\n    }\r\n  }, [game.startScreenVisible])\r\n\r\n  return (\r\n    <MainWrapper>\r\n      {game.startScreenVisible && (\r\n        <StartScreen\r\n          game={game}\r\n          setGame={setGame}\r\n          players={players}\r\n          setPlayers={setPlayers}\r\n        />\r\n      )}\r\n      {game.gameInitialPhaseScreenVisible && (\r\n        <InitialPhaseScreen\r\n          game={game}\r\n          setGame={setGame}\r\n          players={players}\r\n          setPlayers={setPlayers}\r\n        />\r\n      )}\r\n      {game.gameBoardScreenVisible && (\r\n        <GameBoardScreen\r\n          game={game}\r\n          setGame={setGame}\r\n          players={players}\r\n          setPlayers={setPlayers}\r\n        />\r\n      )}\r\n      {game.kierowcaAutubusuScreenVisible && (\r\n        <KierowcaAutobusuPhaseScreen\r\n          game={game}\r\n          setGame={setGame}\r\n          players={players}\r\n          setPlayers={setPlayers}\r\n          handleGameReset={handleGameReset}\r\n        />\r\n      )}\r\n    </MainWrapper>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.scss\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}